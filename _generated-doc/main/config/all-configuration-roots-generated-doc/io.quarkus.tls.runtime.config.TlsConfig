[{"configDocSection":{"name":"quarkus.tls.default-certificate-config","optional":true,"withinAMap":false,"sectionDetails":"= The default TLS bucket configuration","sectionDetailsTitle":"The default TLS bucket configuration","configPhase":"RUN_TIME","topLevelGrouping":"quarkus.tls","configGroupType":"io.quarkus.tls.runtime.config.TlsBucketConfig","showSection":true,"configDocItems":[{"configDocSection":{"name":"quarkus.tls.key-store","optional":true,"withinAMap":false,"sectionDetails":"== The key store configuration\n\nKey stores are used to store private keys and their associated X.509 certificate chains. For example, for `HTTPS`, it stores the server's private key and the server's certificate. The certificate is used to prove the server's identity to the client.","sectionDetailsTitle":"The key store configuration","configPhase":"RUN_TIME","topLevelGrouping":"quarkus.tls","configGroupType":"io.quarkus.tls.runtime.config.KeyStoreConfig","showSection":true,"configDocItems":[{"configDocSection":{"name":"quarkus.tls.key-store.pem","optional":true,"withinAMap":false,"sectionDetails":"== Configures the PEM key/certificate pair","sectionDetailsTitle":"Configures the PEM key/certificate pair","configPhase":"RUN_TIME","topLevelGrouping":"quarkus.tls","configGroupType":"io.quarkus.tls.runtime.config.PemKeyCertConfig","showSection":true,"configDocItems":[{"configDocKey":{"type":"path","key":"quarkus.tls.key-store.pem.\"key-certs\".key","additionalKeys":[],"configDoc":"The path to the key file (in PEM format).","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"key","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_KEY_STORE_PEM__KEY_CERTS__KEY","enum":false}},{"configDocKey":{"type":"path","key":"quarkus.tls.key-store.pem.\"key-certs\".cert","additionalKeys":[],"configDoc":"The path to the certificate file (in PEM format).","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"cert","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_KEY_STORE_PEM__KEY_CERTS__CERT","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.key-store.pem.order","additionalKeys":[],"configDoc":"The order of the key/cert files, based on the names in the `keyCerts` map.\n\nBy default, Quarkus sorts the key using a lexicographical order. This property allows you to specify the order of the key/cert files.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"order","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":true,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_KEY_STORE_PEM_ORDER","enum":false}},{"configDocKey":{"type":"path","key":"quarkus.tls.\"tls-bucket-name\".key-store.pem.\"key-certs\".key","additionalKeys":[],"configDoc":"The path to the key file (in PEM format).","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"key","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__KEY_STORE_PEM__KEY_CERTS__KEY","enum":false}},{"configDocKey":{"type":"path","key":"quarkus.tls.\"tls-bucket-name\".key-store.pem.\"key-certs\".cert","additionalKeys":[],"configDoc":"The path to the certificate file (in PEM format).","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"cert","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__KEY_STORE_PEM__KEY_CERTS__CERT","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".key-store.pem.order","additionalKeys":[],"configDoc":"The order of the key/cert files, based on the names in the `keyCerts` map.\n\nBy default, Quarkus sorts the key using a lexicographical order. This property allows you to specify the order of the key/cert files.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"order","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":true,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__KEY_STORE_PEM_ORDER","enum":false}}],"anchorPrefix":null}},{"configDocSection":{"name":"quarkus.tls.key-store.p12","optional":true,"withinAMap":false,"sectionDetails":"== Configure the PKCS12 key store","sectionDetailsTitle":"Configure the PKCS12 key store","configPhase":"RUN_TIME","topLevelGrouping":"quarkus.tls","configGroupType":"io.quarkus.tls.runtime.config.P12KeyStoreConfig","showSection":true,"configDocItems":[{"configDocKey":{"type":"path","key":"quarkus.tls.key-store.p12.path","additionalKeys":[],"configDoc":"Path to the key store file (P12 / PFX format).","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"path","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_KEY_STORE_P12_PATH","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.key-store.p12.password","additionalKeys":[],"configDoc":"Password of the key store. When not set, the password must be retrieved from the credential provider.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"password","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_KEY_STORE_P12_PASSWORD","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.key-store.p12.alias","additionalKeys":[],"configDoc":"Alias of the private key and certificate in the key store.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"alias","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_KEY_STORE_P12_ALIAS","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.key-store.p12.alias-password","additionalKeys":[],"configDoc":"Password of the alias in the key store. If not set, the password will be retrieved from the credential provider.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"alias-password","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_KEY_STORE_P12_ALIAS_PASSWORD","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.key-store.p12.provider","additionalKeys":[],"configDoc":"Provider of the key store.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"provider","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_KEY_STORE_P12_PROVIDER","enum":false}},{"configDocKey":{"type":"path","key":"quarkus.tls.\"tls-bucket-name\".key-store.p12.path","additionalKeys":[],"configDoc":"Path to the key store file (P12 / PFX format).","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"path","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__KEY_STORE_P12_PATH","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".key-store.p12.password","additionalKeys":[],"configDoc":"Password of the key store. When not set, the password must be retrieved from the credential provider.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"password","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__KEY_STORE_P12_PASSWORD","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".key-store.p12.alias","additionalKeys":[],"configDoc":"Alias of the private key and certificate in the key store.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"alias","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__KEY_STORE_P12_ALIAS","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".key-store.p12.alias-password","additionalKeys":[],"configDoc":"Password of the alias in the key store. If not set, the password will be retrieved from the credential provider.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"alias-password","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__KEY_STORE_P12_ALIAS_PASSWORD","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".key-store.p12.provider","additionalKeys":[],"configDoc":"Provider of the key store.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"provider","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__KEY_STORE_P12_PROVIDER","enum":false}}],"anchorPrefix":null}},{"configDocSection":{"name":"quarkus.tls.key-store.jks","optional":true,"withinAMap":false,"sectionDetails":"== Configure the JKS key store","sectionDetailsTitle":"Configure the JKS key store","configPhase":"RUN_TIME","topLevelGrouping":"quarkus.tls","configGroupType":"io.quarkus.tls.runtime.config.JKSKeyStoreConfig","showSection":true,"configDocItems":[{"configDocKey":{"type":"path","key":"quarkus.tls.key-store.jks.path","additionalKeys":[],"configDoc":"Path to the keystore file (JKS format).","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"path","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_KEY_STORE_JKS_PATH","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.key-store.jks.password","additionalKeys":[],"configDoc":"Password of the key store. When not set, the password must be retrieved from the credential provider.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"password","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_KEY_STORE_JKS_PASSWORD","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.key-store.jks.alias","additionalKeys":[],"configDoc":"Alias of the private key and certificate in the key store.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"alias","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_KEY_STORE_JKS_ALIAS","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.key-store.jks.alias-password","additionalKeys":[],"configDoc":"Password of the alias in the key store. When not set, the password may be retrieved from the credential provider.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"alias-password","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_KEY_STORE_JKS_ALIAS_PASSWORD","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.key-store.jks.provider","additionalKeys":[],"configDoc":"Provider of the key store.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"provider","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_KEY_STORE_JKS_PROVIDER","enum":false}},{"configDocKey":{"type":"path","key":"quarkus.tls.\"tls-bucket-name\".key-store.jks.path","additionalKeys":[],"configDoc":"Path to the keystore file (JKS format).","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"path","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__KEY_STORE_JKS_PATH","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".key-store.jks.password","additionalKeys":[],"configDoc":"Password of the key store. When not set, the password must be retrieved from the credential provider.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"password","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__KEY_STORE_JKS_PASSWORD","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".key-store.jks.alias","additionalKeys":[],"configDoc":"Alias of the private key and certificate in the key store.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"alias","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__KEY_STORE_JKS_ALIAS","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".key-store.jks.alias-password","additionalKeys":[],"configDoc":"Password of the alias in the key store. When not set, the password may be retrieved from the credential provider.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"alias-password","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__KEY_STORE_JKS_ALIAS_PASSWORD","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".key-store.jks.provider","additionalKeys":[],"configDoc":"Provider of the key store.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"provider","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__KEY_STORE_JKS_PROVIDER","enum":false}}],"anchorPrefix":null}},{"configDocKey":{"type":"boolean","key":"quarkus.tls.key-store.sni","additionalKeys":[],"configDoc":"Enables Server Name Indication (SNI).\n\nServer Name Indication (SNI) is a TLS extension that allows a client to specify the hostname it is attempting to connect to during the TLS handshake. This enables a server to present different SSL certificates for multiple domains on a single IP address, facilitating secure communication for virtual hosting scenarios.\n\nWith this setting enabled, the client indicate the server name during the TLS handshake, allowing the server to select the right certificate.\n\nWhen configuring the keystore with PEM files, multiple CRT/Key must be given. When configuring the keystore with a JKS or a P12 file, it selects one alias based on the SNI hostname. In this case, all the keystore password and alias password must be the same (configured with the `password` and `alias-password` properties. Do not set the `alias` property.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"sni","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_KEY_STORE_SNI","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.key-store.credentials-provider.name","additionalKeys":[],"configDoc":"The name of the \"credential\" bucket (map key -> passwords) to retrieve from the `io.quarkus.credentials.CredentialsProvider`. If not set, the credential provider will not be used.\n\nA credential provider offers a way to retrieve the key store password as well as alias password. Note that the credential provider is only used if the passwords are not set in the configuration.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"name","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_KEY_STORE_CREDENTIALS_PROVIDER_NAME","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.key-store.credentials-provider.bean-name","additionalKeys":[],"configDoc":"The name of the bean providing the credential provider.\n\nThe name is used to select the credential provider to use. The credential provider must be exposed as a CDI bean and with the `@Named` annotation set to the configured name to be selected.\n\nIf not set, the default credential provider is used.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"bean-name","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_KEY_STORE_CREDENTIALS_PROVIDER_BEAN_NAME","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.key-store.credentials-provider.password-key","additionalKeys":[],"configDoc":"The key used to retrieve the key store password.\n\nIf the selected credential provider does not support the key, the password is not retrieved. Otherwise, the retrieved value is used to open the key store.","withinAMap":false,"defaultValue":"password","javaDocSiteLink":"","docMapKey":"password-key","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_KEY_STORE_CREDENTIALS_PROVIDER_PASSWORD_KEY","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.key-store.credentials-provider.alias-password-key","additionalKeys":[],"configDoc":"The key used to retrieve the key store alias password.\n\nIf the selected credential provider does not contain the key, the alias password is not retrieved. Otherwise, the retrieved value is used to access the alias `private key` from the key store.","withinAMap":false,"defaultValue":"alias-password","javaDocSiteLink":"","docMapKey":"alias-password-key","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_KEY_STORE_CREDENTIALS_PROVIDER_ALIAS_PASSWORD_KEY","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.tls.\"tls-bucket-name\".key-store.sni","additionalKeys":[],"configDoc":"Enables Server Name Indication (SNI).\n\nServer Name Indication (SNI) is a TLS extension that allows a client to specify the hostname it is attempting to connect to during the TLS handshake. This enables a server to present different SSL certificates for multiple domains on a single IP address, facilitating secure communication for virtual hosting scenarios.\n\nWith this setting enabled, the client indicate the server name during the TLS handshake, allowing the server to select the right certificate.\n\nWhen configuring the keystore with PEM files, multiple CRT/Key must be given. When configuring the keystore with a JKS or a P12 file, it selects one alias based on the SNI hostname. In this case, all the keystore password and alias password must be the same (configured with the `password` and `alias-password` properties. Do not set the `alias` property.","withinAMap":true,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"sni","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__KEY_STORE_SNI","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".key-store.credentials-provider.name","additionalKeys":[],"configDoc":"The name of the \"credential\" bucket (map key -> passwords) to retrieve from the `io.quarkus.credentials.CredentialsProvider`. If not set, the credential provider will not be used.\n\nA credential provider offers a way to retrieve the key store password as well as alias password. Note that the credential provider is only used if the passwords are not set in the configuration.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"name","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__KEY_STORE_CREDENTIALS_PROVIDER_NAME","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".key-store.credentials-provider.bean-name","additionalKeys":[],"configDoc":"The name of the bean providing the credential provider.\n\nThe name is used to select the credential provider to use. The credential provider must be exposed as a CDI bean and with the `@Named` annotation set to the configured name to be selected.\n\nIf not set, the default credential provider is used.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"bean-name","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__KEY_STORE_CREDENTIALS_PROVIDER_BEAN_NAME","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".key-store.credentials-provider.password-key","additionalKeys":[],"configDoc":"The key used to retrieve the key store password.\n\nIf the selected credential provider does not support the key, the password is not retrieved. Otherwise, the retrieved value is used to open the key store.","withinAMap":true,"defaultValue":"password","javaDocSiteLink":"","docMapKey":"password-key","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__KEY_STORE_CREDENTIALS_PROVIDER_PASSWORD_KEY","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".key-store.credentials-provider.alias-password-key","additionalKeys":[],"configDoc":"The key used to retrieve the key store alias password.\n\nIf the selected credential provider does not contain the key, the alias password is not retrieved. Otherwise, the retrieved value is used to access the alias `private key` from the key store.","withinAMap":true,"defaultValue":"alias-password","javaDocSiteLink":"","docMapKey":"alias-password-key","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__KEY_STORE_CREDENTIALS_PROVIDER_ALIAS_PASSWORD_KEY","enum":false}}],"anchorPrefix":null}},{"configDocSection":{"name":"quarkus.tls.trust-store","optional":true,"withinAMap":false,"sectionDetails":"== The trust store configuration\n\nTrust stores are used to store certificates from trusted entities. For example, for `HTTPS`, it stores the certificate authorities that are trusted by the server. The server uses the trust store to verify the client's certificate when mTLS (client authentication) is enabled.","sectionDetailsTitle":"The trust store configuration","configPhase":"RUN_TIME","topLevelGrouping":"quarkus.tls","configGroupType":"io.quarkus.tls.runtime.config.TrustStoreConfig","showSection":true,"configDocItems":[{"configDocSection":{"name":"quarkus.tls.trust-store.pem","optional":true,"withinAMap":false,"sectionDetails":"== Configures the list of trusted certificates","sectionDetailsTitle":"Configures the list of trusted certificates","configPhase":"RUN_TIME","topLevelGrouping":"quarkus.tls","configGroupType":"io.quarkus.tls.runtime.config.PemCertsConfig","showSection":true,"configDocItems":[{"configDocKey":{"type":"path","key":"quarkus.tls.trust-store.pem.certs","additionalKeys":[],"configDoc":"List of the trusted cert paths (Pem format).","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"certs","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":true,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_TRUST_STORE_PEM_CERTS","enum":false}},{"configDocKey":{"type":"path","key":"quarkus.tls.\"tls-bucket-name\".trust-store.pem.certs","additionalKeys":[],"configDoc":"List of the trusted cert paths (Pem format).","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"certs","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":true,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__TRUST_STORE_PEM_CERTS","enum":false}}],"anchorPrefix":null}},{"configDocSection":{"name":"quarkus.tls.trust-store.p12","optional":true,"withinAMap":false,"sectionDetails":"== Configure the PKCS12 trust store","sectionDetailsTitle":"Configure the PKCS12 trust store","configPhase":"RUN_TIME","topLevelGrouping":"quarkus.tls","configGroupType":"io.quarkus.tls.runtime.config.P12TrustStoreConfig","showSection":true,"configDocItems":[{"configDocKey":{"type":"path","key":"quarkus.tls.trust-store.p12.path","additionalKeys":[],"configDoc":"Path to the trust store file (P12 / PFX format).","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"path","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_TRUST_STORE_P12_PATH","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.trust-store.p12.password","additionalKeys":[],"configDoc":"Password of the trust store. If not set, the password must be retrieved from the credential provider.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"password","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_TRUST_STORE_P12_PASSWORD","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.trust-store.p12.alias","additionalKeys":[],"configDoc":"Alias of the trust store.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"alias","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_TRUST_STORE_P12_ALIAS","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.trust-store.p12.provider","additionalKeys":[],"configDoc":"Provider of the trust store.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"provider","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_TRUST_STORE_P12_PROVIDER","enum":false}},{"configDocKey":{"type":"path","key":"quarkus.tls.\"tls-bucket-name\".trust-store.p12.path","additionalKeys":[],"configDoc":"Path to the trust store file (P12 / PFX format).","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"path","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__TRUST_STORE_P12_PATH","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".trust-store.p12.password","additionalKeys":[],"configDoc":"Password of the trust store. If not set, the password must be retrieved from the credential provider.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"password","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__TRUST_STORE_P12_PASSWORD","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".trust-store.p12.alias","additionalKeys":[],"configDoc":"Alias of the trust store.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"alias","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__TRUST_STORE_P12_ALIAS","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".trust-store.p12.provider","additionalKeys":[],"configDoc":"Provider of the trust store.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"provider","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__TRUST_STORE_P12_PROVIDER","enum":false}}],"anchorPrefix":null}},{"configDocSection":{"name":"quarkus.tls.trust-store.jks","optional":true,"withinAMap":false,"sectionDetails":"== Configure the JKS trust store","sectionDetailsTitle":"Configure the JKS trust store","configPhase":"RUN_TIME","topLevelGrouping":"quarkus.tls","configGroupType":"io.quarkus.tls.runtime.config.JKSTrustStoreConfig","showSection":true,"configDocItems":[{"configDocKey":{"type":"path","key":"quarkus.tls.trust-store.jks.path","additionalKeys":[],"configDoc":"Path to the trust store file (JKS format).","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"path","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_TRUST_STORE_JKS_PATH","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.trust-store.jks.password","additionalKeys":[],"configDoc":"Password of the trust store. If not set, the password must be retrieved from the credential provider.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"password","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_TRUST_STORE_JKS_PASSWORD","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.trust-store.jks.alias","additionalKeys":[],"configDoc":"Alias of the key in the trust store.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"alias","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_TRUST_STORE_JKS_ALIAS","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.trust-store.jks.provider","additionalKeys":[],"configDoc":"Provider of the trust store.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"provider","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_TRUST_STORE_JKS_PROVIDER","enum":false}},{"configDocKey":{"type":"path","key":"quarkus.tls.\"tls-bucket-name\".trust-store.jks.path","additionalKeys":[],"configDoc":"Path to the trust store file (JKS format).","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"path","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__TRUST_STORE_JKS_PATH","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".trust-store.jks.password","additionalKeys":[],"configDoc":"Password of the trust store. If not set, the password must be retrieved from the credential provider.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"password","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__TRUST_STORE_JKS_PASSWORD","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".trust-store.jks.alias","additionalKeys":[],"configDoc":"Alias of the key in the trust store.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"alias","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__TRUST_STORE_JKS_ALIAS","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".trust-store.jks.provider","additionalKeys":[],"configDoc":"Provider of the trust store.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"provider","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__TRUST_STORE_JKS_PROVIDER","enum":false}}],"anchorPrefix":null}},{"configDocKey":{"type":"string","key":"quarkus.tls.trust-store.credentials-provider.name","additionalKeys":[],"configDoc":"The name of the \"credential\" bucket (map key -> passwords) to retrieve from the `io.quarkus.credentials.CredentialsProvider`. If not set, the credential provider will not be used.\n\nA credential provider offers a way to retrieve the key store password as well as alias password. Note that the credential provider is only used if the passwords are not set in the configuration.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"name","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_TRUST_STORE_CREDENTIALS_PROVIDER_NAME","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.trust-store.credentials-provider.bean-name","additionalKeys":[],"configDoc":"The name of the bean providing the credential provider.\n\nThe name is used to select the credential provider to use. The credential provider must be exposed as a CDI bean and with the `@Named` annotation set to the configured name to be selected.\n\nIf not set, the default credential provider is used.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"bean-name","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_TRUST_STORE_CREDENTIALS_PROVIDER_BEAN_NAME","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.trust-store.credentials-provider.password-key","additionalKeys":[],"configDoc":"The key used to retrieve the trust store password.\n\nIf the selected credential provider does not contain the configured key, the password is not retrieved. Otherwise, the retrieved value is used to open the trust store.","withinAMap":false,"defaultValue":"password","javaDocSiteLink":"","docMapKey":"password-key","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_TRUST_STORE_CREDENTIALS_PROVIDER_PASSWORD_KEY","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".trust-store.credentials-provider.name","additionalKeys":[],"configDoc":"The name of the \"credential\" bucket (map key -> passwords) to retrieve from the `io.quarkus.credentials.CredentialsProvider`. If not set, the credential provider will not be used.\n\nA credential provider offers a way to retrieve the key store password as well as alias password. Note that the credential provider is only used if the passwords are not set in the configuration.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"name","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__TRUST_STORE_CREDENTIALS_PROVIDER_NAME","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".trust-store.credentials-provider.bean-name","additionalKeys":[],"configDoc":"The name of the bean providing the credential provider.\n\nThe name is used to select the credential provider to use. The credential provider must be exposed as a CDI bean and with the `@Named` annotation set to the configured name to be selected.\n\nIf not set, the default credential provider is used.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"bean-name","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__TRUST_STORE_CREDENTIALS_PROVIDER_BEAN_NAME","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".trust-store.credentials-provider.password-key","additionalKeys":[],"configDoc":"The key used to retrieve the trust store password.\n\nIf the selected credential provider does not contain the configured key, the password is not retrieved. Otherwise, the retrieved value is used to open the trust store.","withinAMap":true,"defaultValue":"password","javaDocSiteLink":"","docMapKey":"password-key","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__TRUST_STORE_CREDENTIALS_PROVIDER_PASSWORD_KEY","enum":false}}],"anchorPrefix":null}},{"configDocKey":{"type":"string","key":"quarkus.tls.cipher-suites","additionalKeys":[],"configDoc":"Sets the ordered list of enabled cipher suites. If none is given, a reasonable default is selected from the built-in ciphers.\n\nWhen suites are set, it takes precedence over the default suite defined by the `SSLEngineOptions` in use.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"cipher-suites","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":true,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_CIPHER_SUITES","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.protocols","additionalKeys":[],"configDoc":"Sets the ordered list of enabled TLS protocols.\n\nIf not set, it defaults to `\"TLSv1.3, TLSv1.2\"`. The following list of protocols are supported: `TLSv1, TLSv1.1, TLSv1.2, TLSv1.3`. To only enable `TLSv1.3`, set the value to `to \"TLSv1.3\"`.\n\nNote that setting an empty list, and enabling TLS is invalid. You must at least have one protocol.\n\nAlso, setting this replaces the default list of protocols.","withinAMap":false,"defaultValue":"TLSv1.3,TLSv1.2","javaDocSiteLink":"","docMapKey":"protocols","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":true,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_PROTOCOLS","enum":false}},{"configDocKey":{"type":"java.time.Duration","key":"quarkus.tls.handshake-timeout","additionalKeys":[],"configDoc":"The timeout for the TLS handshake phase.\n\nIf not set, it defaults to 10 seconds.","withinAMap":false,"defaultValue":"10S","javaDocSiteLink":"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html","docMapKey":"handshake-timeout","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_HANDSHAKE_TIMEOUT","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.tls.alpn","additionalKeys":[],"configDoc":"Enables the Application-Layer Protocol Negotiation (ALPN).\n\nApplication-Layer Protocol Negotiation is a TLS extension that allows the client and server during the TLS handshake to negotiate which protocol they will use for communication. ALPN enables more efficient communication by allowing the client to indicate its preferred application protocol to the server before the TLS connection is established. This helps in scenarios such as HTTP/2 where multiple protocols may be available, allowing for faster protocol selection.","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"alpn","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_ALPN","enum":false}},{"configDocKey":{"type":"path","key":"quarkus.tls.certificate-revocation-list","additionalKeys":[],"configDoc":"Sets the list of revoked certificates (paths to files).\n\nA Certificate Revocation List (CRL) is a list of digital certificates that have been revoked by the issuing Certificate Authority (CA) before their scheduled expiration date. When a certificate is compromised, no longer needed, or deemed invalid for any reason, the CA adds it to the CRL to inform relying parties not to trust the certificate anymore.\n\nTwo formats are allowed: DER and PKCS++#++7 (also known as P7B). When using the DER format, you must pass DER-encoded CRLs. When using the PKCS++#++7 format, you must pass PKCS++#++7 `SignedData` object, with the only significant field being `crls`.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"certificate-revocation-list","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":true,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_CERTIFICATE_REVOCATION_LIST","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.tls.trust-all","additionalKeys":[],"configDoc":"If set to `true`, the server trusts all certificates.\n\nThis is useful for testing, but should not be used in production.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"trust-all","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_TRUST_ALL","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.hostname-verification-algorithm","additionalKeys":[],"configDoc":"The hostname verification algorithm to use in case the server's identity should be checked. Should be `HTTPS` (default), `LDAPS` or an `NONE`.\n\nIf set to `NONE`, it does not verify the hostname.\n\nIf not set, the configured extension decides the default algorithm to use. For example, for HTTP, it will be \"HTTPS\". For TCP, it can depend on the protocol. Nevertheless, it is recommended to set it to \"HTTPS\" or \"LDAPS\".","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"hostname-verification-algorithm","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_HOSTNAME_VERIFICATION_ALGORITHM","enum":false}},{"configDocKey":{"type":"java.time.Duration","key":"quarkus.tls.reload-period","additionalKeys":[],"configDoc":"When configured, the server will reload the certificates (from the file system for example) and fires a `CertificateUpdatedEvent` if the reload is successful\n\nThis property configures the period to reload the certificates. IF not set, the certificates won't be reloaded automatically. However, the application can still trigger the reload manually using the `io.quarkus.tls.TlsConfiguration++#++reload()` method, and then fire the `CertificateUpdatedEvent` manually.\n\nThe fired event is used to notify the application that the certificates have been updated, and thus proceed with the actual switch of certificates.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html","docMapKey":"reload-period","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS_RELOAD_PERIOD","enum":false}}],"anchorPrefix":null}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".cipher-suites","additionalKeys":[],"configDoc":"Sets the ordered list of enabled cipher suites. If none is given, a reasonable default is selected from the built-in ciphers.\n\nWhen suites are set, it takes precedence over the default suite defined by the `SSLEngineOptions` in use.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"cipher-suites","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":true,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__CIPHER_SUITES","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".protocols","additionalKeys":[],"configDoc":"Sets the ordered list of enabled TLS protocols.\n\nIf not set, it defaults to `\"TLSv1.3, TLSv1.2\"`. The following list of protocols are supported: `TLSv1, TLSv1.1, TLSv1.2, TLSv1.3`. To only enable `TLSv1.3`, set the value to `to \"TLSv1.3\"`.\n\nNote that setting an empty list, and enabling TLS is invalid. You must at least have one protocol.\n\nAlso, setting this replaces the default list of protocols.","withinAMap":true,"defaultValue":"TLSv1.3,TLSv1.2","javaDocSiteLink":"","docMapKey":"protocols","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":true,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__PROTOCOLS","enum":false}},{"configDocKey":{"type":"java.time.Duration","key":"quarkus.tls.\"tls-bucket-name\".handshake-timeout","additionalKeys":[],"configDoc":"The timeout for the TLS handshake phase.\n\nIf not set, it defaults to 10 seconds.","withinAMap":true,"defaultValue":"10S","javaDocSiteLink":"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html","docMapKey":"handshake-timeout","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__HANDSHAKE_TIMEOUT","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.tls.\"tls-bucket-name\".alpn","additionalKeys":[],"configDoc":"Enables the Application-Layer Protocol Negotiation (ALPN).\n\nApplication-Layer Protocol Negotiation is a TLS extension that allows the client and server during the TLS handshake to negotiate which protocol they will use for communication. ALPN enables more efficient communication by allowing the client to indicate its preferred application protocol to the server before the TLS connection is established. This helps in scenarios such as HTTP/2 where multiple protocols may be available, allowing for faster protocol selection.","withinAMap":true,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"alpn","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__ALPN","enum":false}},{"configDocKey":{"type":"path","key":"quarkus.tls.\"tls-bucket-name\".certificate-revocation-list","additionalKeys":[],"configDoc":"Sets the list of revoked certificates (paths to files).\n\nA Certificate Revocation List (CRL) is a list of digital certificates that have been revoked by the issuing Certificate Authority (CA) before their scheduled expiration date. When a certificate is compromised, no longer needed, or deemed invalid for any reason, the CA adds it to the CRL to inform relying parties not to trust the certificate anymore.\n\nTwo formats are allowed: DER and PKCS++#++7 (also known as P7B). When using the DER format, you must pass DER-encoded CRLs. When using the PKCS++#++7 format, you must pass PKCS++#++7 `SignedData` object, with the only significant field being `crls`.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"certificate-revocation-list","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":true,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__CERTIFICATE_REVOCATION_LIST","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.tls.\"tls-bucket-name\".trust-all","additionalKeys":[],"configDoc":"If set to `true`, the server trusts all certificates.\n\nThis is useful for testing, but should not be used in production.","withinAMap":true,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"trust-all","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__TRUST_ALL","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.tls.\"tls-bucket-name\".hostname-verification-algorithm","additionalKeys":[],"configDoc":"The hostname verification algorithm to use in case the server's identity should be checked. Should be `HTTPS` (default), `LDAPS` or an `NONE`.\n\nIf set to `NONE`, it does not verify the hostname.\n\nIf not set, the configured extension decides the default algorithm to use. For example, for HTTP, it will be \"HTTPS\". For TCP, it can depend on the protocol. Nevertheless, it is recommended to set it to \"HTTPS\" or \"LDAPS\".","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"hostname-verification-algorithm","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__HOSTNAME_VERIFICATION_ALGORITHM","enum":false}},{"configDocKey":{"type":"java.time.Duration","key":"quarkus.tls.\"tls-bucket-name\".reload-period","additionalKeys":[],"configDoc":"When configured, the server will reload the certificates (from the file system for example) and fires a `CertificateUpdatedEvent` if the reload is successful\n\nThis property configures the period to reload the certificates. IF not set, the certificates won't be reloaded automatically. However, the application can still trigger the reload manually using the `io.quarkus.tls.TlsConfiguration++#++reload()` method, and then fire the `CertificateUpdatedEvent` manually.\n\nThe fired event is used to notify the application that the certificates have been updated, and thus proceed with the actual switch of certificates.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html","docMapKey":"reload-period","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.tls","since":null,"environmentVariable":"QUARKUS_TLS__TLS_BUCKET_NAME__RELOAD_PERIOD","enum":false}}]